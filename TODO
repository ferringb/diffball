* Command line hash_size is not always abided by, notable BUCKET/RBUCKET- will 
  be fixed in the next release.

* remove CommandBuffer.default_(add,copy)_src.  The current macros are just glue from old setup to new- it's a kludge.

* need to implement something a bit better performance wise for RH_RBUCKET_HASH and RH_BUCKET_HASH.
  These are hash/bucket schemes (first 2 bytes of a 4 byte chksum are the array index), w/ the bucket being binary searched.
  The problem is, that the bucket needs to be searched prior to insertion of a new entry- this is to avoid duplicates.
  
  The current method is basically tagging it onto the end, and qsorting it.

  That sucks.
  
  Queuing up a couple of entries prior to qsorting (eg bsearch the sorted section, then linear search the unsorted heathens), 
  which would speed things up a bit.  I'd rather try to order then entries such that insert/search is easier, then finalize it in 
  ascending order for bsearchs.  Suggestions would be appreciated.
  Also possible to just add the entries into the hash array, and cleanse it at certain intervals (eg when a realloc would be needed).
  
* chksum collision cache.  Preferably, strengthing the chksum so collisions happen less, but they still happen.  Each collision 
  results in a seek in the reference file, then byte by byte verification that the two segments match.  Collisions get pricy due to 
  IO issues involved.
  
  Thinking of just maintaining a hash/bucket of chksum collisions, with an alternate chksum of the reference segment.
  Do a lookup in the main rhash, check the bad chksum hash, if a match is found, compare the alternate chksums.  If they match, 
  remove the evil collision entry (or leave it, and have it overwrote by the next collision that falls into that bucket).
  
  Alternatively, I could just throw out hash entries that collide.  I view this as sub optimal, since the more information in the hash, 
  the better the differencing.
  
* Split cfile into it's own lib, making transformations (whether rle, bzip2, or gzip) stackable.  Not sure if this will ever be done.

* create shared libs for formats, dcbuffer, and diff-algs. (perhaps all in one lib).  Moving towards it now, no rush.

Aside from that, if  you've got a suggestion, email it to ferringb at gentoo dot org.

